---
- hosts: localhost
  gather_facts: yes
  tasks:
  - name: Install git
    package:
      name: git
      state: present
    become: false if ansible_distribution == 'MacOSX' else true
    tags:
      - core
  - name: Install asciinema
    package:
      name: asciinema
      state: present
  - name: Install borgbackup (macOS)
    homebrew_cask:
      name: borgbackup
      state: present
    when: ansible_distribution == 'MacOSX'
  - name: Install borgbackup (Linux)
    package:
      name: borgbackup
      state: present
    when: ansible_distribution == 'Fedora'
  - name: Install curl
    package:
      name: curl
      state: present
    become: false if ansible_distribution == 'MacOSX' else true
    tags:
      - core
  - name: Install chicken scheme
    package:
      name: chicken
      state: present
  - name: Install giter8
    package:
      name: giter8
      state: present
    when: ansible_distribution == 'MacOSX'
  - name: Install go
    package:
      name: go
      state: present
  - name: Install Imagemagick
    package:
      name: imagemagick
      state: present
    when: ansible_distribution == 'MacOSX'
  - name: Install Imagemagick
    package:
      name: ImageMagick
      state: present
    when: ansible_distribution == 'Fedora'
  - name: Install jEnv (macOS)
    package:
      name: jenv
      state: present
    when: ansible_distribution == 'MacOSX'
  - name: Install jEnv (Linux)
    command: git clone https://github.com/gcuisinier/jenv.git ~/.jenv
    when: ansible_distribution == 'Fedora'
  - name: Check if MacDown is installed
    stat:
      path: /Applications/MacDown.app
    register: macdown_result
  - name: Install Macdown
    homebrew_cask:
      name: macdown
      state: present
    when:
      - macdown_result.stat.exists == False 
      - ansible_distribution == 'MacOSX'
  - name: Install libsndfile
    package:
      name: libsndfile
      state: present
  - name: Install maven
    package:
      name: maven
      state: present 
  - name: Install pyenv (macOS)
    package:
      name: pyenv
      state: present
    when: ansible_distribution == 'MacOSX'
  - name: Install pyenv (Linux)
    command: git clone https://github.com/pyenv/pyenv.git ~/.pyenv
    when: ansible_distribution == 'Fedora'
  - name: Install scala
    package:
      name: scala
      state: present
  # - name: Install um
  #   package:
  #     name: sinclairtarget/wst/um
  #     state: present
  - name: Configure matplotlib
    block:
      - name: Create matplotlib config dir
        file:
          path: "{{ ansible_env.HOME }}/.matplotlib"
          state: directory
      - name: Copy .matplotlibrc
        copy:
          src: "{{ playbook_dir }}/.matplotlib/matplotlibrc"
          dest: "{{ ansible_env.HOME }}/.matplotlib/matplotlibrc"
  - name: Configure um
    block:
      - name: Create um config dir
        file:
          path: "{{ ansible_env.HOME }}/.um"
          state: directory
      - name: Create um config file
        file:
          path: "{{ ansible_env.HOME }}/.um/umconfig"
          state: touch
      - name: Add pages directory to um config file
        lineinfile:
          path: "{{ ansible_env.HOME }}/.um/umconfig"
          line: "pages_directory = {{ ansible_env.HOME }}/code/umpages"
      - name: Add editor to um config file
        lineinfile:
          path: "{{ ansible_env.HOME }}/.um/umconfig"
          line: editor = vim
  - name: zsh
    block:
      - name: Install zsh
        package:
          name: zsh
          state: present
        become: false if ansible_distribution == 'MacOSX' else true
      - name: Install bash-completion
        package:
          name: bash-completion
          state: present
        become: false if ansible_distribution == 'MacOSX' else true
      - name: Install oh-my-zsh
        git:
          repo: https://github.com/robbyrussell/oh-my-zsh.git
          dest: ~/.oh-my-zsh
      - name: Check if oh-my-zsh auto-completions are installed
        stat:
          path: "{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
        register: ohmyzshcompletion_result  
      - name: Install oh-my-zsh auto-completions
        command: git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
        when: ohmyzshcompletion_result.stat.exists == False 
      - name: Delete current .bash_profile
        file:
          path: "{{ansible_env.HOME}}/.bash_profile"
          state: absent
      - name: Symlink .bashprofile (macOS)
        file:
          src: "{{playbook_dir}}/.bash_profile_mac"
          dest: "{{ansible_env.HOME}}/.bash_profile"
          state: link
        when: ansible_distribution == 'MacOSX'
      - name: Symlink .bashprofile (Linux)
        file:
          src: "{{playbook_dir}}/.bash_profile_linux"
          dest: "{{ansible_env.HOME}}/.bash_profile"
          state: link
        when: ansible_distribution == 'Fedora'
      - name: Delete current .bashrc
        file:
          path: "{{ansible_env.HOME}}/.bashrc"
          state: absent
      - name: Symlink .bashrc
        file:
          src: "{{playbook_dir}}/.bashrc"
          dest: "{{ansible_env.HOME}}/.bashrc"
          state: link
      - name: Symlink .zshrc
        file:
          src: "{{playbook_dir}}/.zshrc"
          dest: "{{ansible_env.HOME}}/.zshrc"
          state: link
    tags:
      - core
  - name: Install spacemacs
    block:
      - name: Tap emacs-plus (macOS)
        homebrew_tap:
          name: d12frosted/emacs-plus
          state: absent
        when: ansible_distribution == 'MacOSX'
      - name: Install emacs-plus (macOS)
        package:
          name: emacs-plus
          install_options: --HEAD --with-natural-title-bars
          state: present
        when: ansible_distribution == 'MacOSX'
      - name: Link emacs-plus (macOS)
        package:
          name: emacs-plus
          state: linked
        when: ansible_distribution == 'MacOSX'
      - name: Install emacs (Linux)
        package:
          name: emacs
          state: present
        become: false if ansible_distribution == 'MacOSX' else true
        when: ansible_distribution == 'Fedora'
      - name: Clone spacemacs config
        git:
          repo: https://github.com/syl20bnr/spacemacs.git
          dest: ~/.emacs.d
    tags:
      - editors
  - name: Create .config directory
    file:
      path: ~/.config
      state: directory
    tags:
        - core
  - name: Install micro editor
    block:
    - name: Install micro editor (macOS)
      package:
        name: micro
        state: present
      when: ansible_distribution == 'MacOSX'
    - name: Install micro editor (Linux)
      shell: curl https://getmic.ro | bash
      args:
        chdir: /usr/bin
      when: ansible_distribution == 'Fedora'
  - name: Install NeoVim
    block:
      - name: Install NeoVim package
        package:
          name: neovim
          state: present
        become: false if ansible_distribution == 'MacOSX' else true
        register: neovim_result
      - name: Delete current NeoVim config
        file:
          path: ~/.config/nvim
          state: absent
      - name: Create NeoVim config dir
        file:
          path: ~/.config/nvim
          state: directory
      - name: Link init.vim
        file:
          src: "{{playbook_dir}}/.config/nvim/init.vim"
          dest: ~/.config/nvim/init.vim
          state: link
    tags:
      - editors
  - name: Install NeoVim plugins
    block:
      - name: Check if NeoVim bundle folder exists
        stat:
          path: "{{ansible_env.HOME}}/.config/nvim/bundle"
        register: neovim_bundle_dir_result
      - name: Delete current NeoVim bundle folder
        shell: "rm -Rf {{ansible_env.HOME}}/.config/nvim/bundle"
        when: neovim_bundle_dir_result.stat.exists == True 
      - name: Create NeoVim bundle folder
        file:
          path: "{{ansible_env.HOME}}/.config/nvim/bundle"
          state: directory
      - name: Install NeoVim Bundles
        git:
          repo: "git://github.com/{{item.url}}"
          dest: "{{ansible_env.HOME}}/.config/nvim/bundle/{{item.name}}"
        with_items:
          - { url: "scrooloose/nerdtree.git", name: "nerdtree" }
          - { url: "zah/nim.vim.git", name: "nim.vim" }
          - { url: "scrooloose/syntastic.git", name: "syntastic" }
          - { url: "vim-airline/vim-airline.git", name: "vim-airline" }
          - { url: "tpope/vim-fugitive.git", name: "vim-fugitive" }
          - { url: "airblade/vim-gitgutter.git", name: "vim-gitgutter" }
          - { url: "plasticboy/vim-markdown.git", name: "vim-markdown" }
          - { url: "rust-lang/rust.vim.git", name: "rust.vim" }
      - name: Install pathogen
        shell: "{{item}}"
        with_items:
          - rm -Rf ~/.config/nvim/autoload
          - mkdir -p ~/.config/nvim/autoload
          - curl -LSso ~/.config/nvim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
    tags:
      - editors
  - name: Install rust
    block:
      - name: Install rustup.sh
        shell: curl https://sh.rustup.rs -sSf | sh -s -- -y
        become: true
    tags:
      - code
      - rust
  - name: Install neofetch (macOS)
    package:
      name: neofetch
      state: present
    become: false if ansible_distribution == 'MacOSX' else true
    tags:
      - core

